name: Generate Release Notes
on:
  push:
    branches:
      - main

jobs:
  generate_release_notes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Read content from md file
        id: read_changelog
        run: |

          # while IFS= read -r line; do
          # echo "$line"
          # done < CHANGELOG.md
          # echo "::set-output name=content::$(printf '%s' "$CHANGELOG_CONTENT")"

          # while IFS= read -r line; do
          # echo "$line"
          # done < CHANGELOG.md
          # CHANGELOG_CONTENT=$(<CHANGELOG.md)
          # echo "::set-output name=content::$CHANGELOG_CONTENT"


          # while IFS= read -r line; do
          # echo "$line"
          # # CHANGELOG_CONTENT+="$line"$'\n'
          # CHANGELOG_CONTENT+="$line"$'\n'
          # done < CHANGELOG.md
          # echo "::set-output name=content::$CHANGELOG_CONTENT"

          # CHANGELOG_CONTENT=""
          # while IFS= read -r line; do
          #  echo "$line"
          #  CHANGELOG_CONTENT+="$line"$'\n'
          # done < CHANGELOG.md
          # echo "::set-output name=content::$CHANGELOG_CONTENT"

          # cat CHANGELOG.md | 
          # while IFS= read data 
          # do echo "$data"
          # done
          # echo "::set-output name=content::$data"


          # CHANGELOG_CONTENT=$(cat CHANGELOG.md)
          # echo "::set-output name=content::$CHANGELOG_CONTENT"

          CHANGELOG_CONTENT=$(head -n 2 CHANGELOG.md)
          echo "::set-output name=content::$CHANGELOG_CONTENT"

          # IFS=''
          # while read data; do
          #     echo "$data"
          # done < CHANGELOG.md

          #  CHANGELOG_CONTENT=""
          #  while IFS= read -r line || [ -n "$line" ]; do
          #  CHANGELOG_CONTENT="$CHANGELOG_CONTENT$line"$'\n'
          #  done < "CHANGELOG.md"
          #  echo "::set-output name=content::$(printf '%s' "$CHANGELOG_CONTENT")"

          # CHANGELOG_CONTENT=$(cat CHANGELOG.md | base64)
          # echo "::set-output name=content::$CHANGELOG_CONTENT"
          # CHANGELOG_CONTENT=$(cat CHANGELOG.md | tr '\n' '\n')
          # echo "::set-output name=content::$CHANGELOG_CONTENT"
          # CHANGELOG_CONTENT=$(cat CHANGELOG.md | while IFS= read -r line; do echo "$line"; done)
          # echo "::set-output name=content::$CHANGELOG_CONTENT"
          # cat filename.txt | while IFS= read -r line; do echo "$line"; done
          # CHANGELOG_CONTENT=$(head -n 1 CHANGELOG.md)
          # echo "::set-output name=content::$CHANGELOG_CONTENT"

      # - name: Extract version from README.md
      #   id: extract_version
      #   run: echo "${{ steps.read_readme.outputs.content }}"

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1) 2>/dev/null || echo "v0.0.0")
          echo "::set-output name=latest_tag::$latest_tag"

      - name: Increment Tag
        id: increment_tag
        run: |
            current_tag="${{ steps.get_latest_tag.outputs.latest_tag }}"
            IFS='.' read -r -a parts <<< "$current_tag"
            major="${parts[0]}"
            minor="${parts[1]}"
            patch="${parts[2]}"
            patch=$((patch+1))
            next_tag="$major.$minor.$patch"
            echo "::set-output name=next_tag::$next_tag"
  
      - name: Publish Release Note
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.increment_tag.outputs.next_tag }}
          release_name: Release ${{ steps.increment_tag.outputs.next_tag }}
          body: |
            Commit Message: ${{ github.event.head_commit.message }}
            CHANGELOG Content: ${{ steps.read_changelog.outputs.content }}